   1              		.file	"loop.c"
   2              	# GNU C11 (Ubuntu 5.4.0-6ubuntu1~16.04.9) version 5.4.0 20160609 (x86_64-linux-gnu)
   3              	#	compiled by GNU C version 5.4.0 20160609, GMP version 6.1.0, MPFR version 3.1.4, MPC version 1.0.
   4              	# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
   5              	# options passed:  -imultiarch x86_64-linux-gnu loop.c -m64 -mtune=generic
   6              	# -march=x86-64 -g -O1 -fverbose-asm -fstack-protector-strong -Wformat
   7              	# -Wformat-security
   8              	# options enabled:  -faggressive-loop-optimizations
   9              	# -fasynchronous-unwind-tables -fauto-inc-dec -fbranch-count-reg
  10              	# -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  11              	# -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  12              	# -fchkp-store-bounds -fchkp-use-static-bounds
  13              	# -fchkp-use-static-const-bounds -fchkp-use-wrappers
  14              	# -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  15              	# -fdefer-pop -fdelete-null-pointer-checks -fdwarf2-cfi-asm
  16              	# -fearly-inlining -feliminate-unused-debug-types -fforward-propagate
  17              	# -ffunction-cse -fgcse-lm -fgnu-runtime -fgnu-unique
  18              	# -fguess-branch-probability -fident -fif-conversion -fif-conversion2
  19              	# -finline -finline-atomics -finline-functions-called-once -fipa-profile
  20              	# -fipa-pure-const -fipa-reference -fira-hoist-pressure
  21              	# -fira-share-save-slots -fira-share-spill-slots -fivopts
  22              	# -fkeep-static-consts -fleading-underscore -flifetime-dse
  23              	# -flto-odr-type-merging -fmath-errno -fmerge-constants
  24              	# -fmerge-debug-strings -fmove-loop-invariants -fomit-frame-pointer
  25              	# -fpeephole -fprefetch-loop-arrays -freg-struct-return
  26              	# -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  27              	# -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  28              	# -fsched-rank-heuristic -fsched-spec -fsched-spec-insn-heuristic
  29              	# -fsched-stalled-insns-dep -fschedule-fusion -fsemantic-interposition
  30              	# -fshow-column -fshrink-wrap -fsigned-zeros -fsplit-ivs-in-unroller
  31              	# -fsplit-wide-types -fssa-phiopt -fstack-protector-strong -fstdarg-opt
  32              	# -fstrict-volatile-bitfields -fsync-libcalls -ftoplevel-reorder
  33              	# -ftrapping-math -ftree-bit-ccp -ftree-ccp -ftree-ch -ftree-coalesce-vars
  34              	# -ftree-copy-prop -ftree-copyrename -ftree-cselim -ftree-dce
  35              	# -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  36              	# -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  37              	# -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop -ftree-pta
  38              	# -ftree-reassoc -ftree-scev-cprop -ftree-sink -ftree-slsr -ftree-sra
  39              	# -ftree-ter -funit-at-a-time -funwind-tables -fvar-tracking
  40              	# -fvar-tracking-assignments -fverbose-asm -fzero-initialized-in-bss
  41              	# -m128bit-long-double -m64 -m80387 -malign-stringops
  42              	# -mavx256-split-unaligned-load -mavx256-split-unaligned-store
  43              	# -mfancy-math-387 -mfp-ret-in-387 -mfxsr -mglibc -mieee-fp
  44              	# -mlong-double-80 -mmmx -mno-sse4 -mpush-args -mred-zone -msse -msse2
  45              	# -mtls-direct-seg-refs -mvzeroupper
  46              	
  47              		.text
  48              	.Ltext0:
  49              		.globl	loop
  51              	loop:
  52              	.LFB0:
  53              		.file 1 "loop.c"
   1:loop.c        **** void loop(double c[], double a[], double b[], int n)
   2:loop.c        **** {
  54              		.loc 1 2 0
  55              		.cfi_startproc
  56              	.LVL0:
   3:loop.c        ****      register int i asm("%eax");
   4:loop.c        **** 
   5:loop.c        ****      for (i=0;i<n;i++)
  57              		.loc 1 5 0
  58 0000 85C9     		testl	%ecx, %ecx	# n
  59 0002 7E1C     		jle	.L1	#,
  60 0004 B8000000 		movl	$0, %eax	#, ivtmp.5
  60      00
  61              	.LVL1:
  62              	.L3:
   6:loop.c        ****        c[i] = a[i] + b[i];
  63              		.loc 1 6 0 discriminator 3
  64 0009 F20F1004 		movsd	(%rsi,%rax,8), %xmm0	# MEM[base: a_10(D), index: ivtmp.5_3, step: 8, offset: 0B], MEM[base: 
  64      C6
  65 000e F20F5804 		addsd	(%rdx,%rax,8), %xmm0	# MEM[base: b_13(D), index: ivtmp.5_3, step: 8, offset: 0B], D.1862
  65      C2
  66 0013 F20F1104 		movsd	%xmm0, (%rdi,%rax,8)	# D.1862, MEM[base: c_8(D), index: ivtmp.5_3, step: 8, offset: 0B]
  66      C7
  67              	.LVL2:
  68 0018 4883C001 		addq	$1, %rax	#, ivtmp.5
  69              	.LVL3:
   5:loop.c        ****        c[i] = a[i] + b[i];
  70              		.loc 1 5 0 discriminator 3
  71 001c 39C1     		cmpl	%eax, %ecx	# ivtmp.5, n
  72 001e 7FE9     		jg	.L3	#,
  73              	.L1:
  74 0020 F3C3     		rep ret
  75              		.cfi_endproc
  76              	.LFE0:
  78              	.Letext0:
